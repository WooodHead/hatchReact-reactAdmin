{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/hannayang/hanna/hatchReact-reactAdmin/src/apollo/with-apollo-client.js\";\nimport React from \"react\";\nimport { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Head from 'next/head';\nimport { getDataFromTree } from 'react-apollo';\nimport nextCookies from 'next-cookies';\nimport cookie from 'js-cookie';\nimport initApollo from 'apollo/init-apollo';\n\nvar withApolloHoc = function withApolloHoc(App) {\n  var _class, _temp;\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_Component) {\n    _inherits(Apollo, _Component);\n\n    _createClass(Apollo, null, [{\n      key: \"getInitialProps\",\n      value: function () {\n        var _getInitialProps = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(context) {\n          var Component, router, ctx, apolloClient, appProps, apolloState;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  Component = context.Component, router = context.router, ctx = context.ctx; // Run all GraphQL queries in the component tree\n                  // and extract the resulting data\n\n                  _context.next = 3;\n                  return initApollo({}, {\n                    getToken: function getToken() {\n                      return nextCookies(ctx).token;\n                    }\n                  });\n\n                case 3:\n                  apolloClient = _context.sent;\n                  ctx.apolloClient = apolloClient;\n                  appProps = {};\n\n                  if (!App.getInitialProps) {\n                    _context.next = 10;\n                    break;\n                  }\n\n                  _context.next = 9;\n                  return App.getInitialProps(context);\n\n                case 9:\n                  appProps = _context.sent;\n\n                case 10:\n                  if (!(ctx.res && ctx.res.finished)) {\n                    _context.next = 12;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", {});\n\n                case 12:\n                  if (process.browser) {\n                    _context.next = 22;\n                    break;\n                  }\n\n                  _context.prev = 13;\n                  _context.next = 16;\n                  return getDataFromTree(React.createElement(App, _extends({}, appProps, {\n                    Component: Component,\n                    router: router,\n                    apolloClient: apolloClient,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 44\n                    },\n                    __self: this\n                  })));\n\n                case 16:\n                  _context.next = 21;\n                  break;\n\n                case 18:\n                  _context.prev = 18;\n                  _context.t0 = _context[\"catch\"](13);\n                  // Prevent Apollo Client GraphQL errors from crashing SSR.\n                  // Handle them in components via the data.error prop:\n                  // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                  console.error('Error while running `getDataFromTree`', _context.t0);\n\n                case 21:\n                  // getDataFromTree does not call componentWillUnmount\n                  // head side effect therefore need to be cleared manually\n                  Head.rewind();\n\n                case 22:\n                  // Extract query data from the Apollo store\n                  apolloState = apolloClient.cache.extract();\n                  return _context.abrupt(\"return\", _objectSpread({}, appProps, {\n                    apolloState: apolloState\n                  }));\n\n                case 24:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this, [[13, 18]]);\n        }));\n\n        function getInitialProps(_x) {\n          return _getInitialProps.apply(this, arguments);\n        }\n\n        return getInitialProps;\n      }()\n    }]);\n\n    function Apollo(props) {\n      var _this;\n\n      _classCallCheck(this, Apollo);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Apollo).call(this, props));\n      _this.apolloClient = initApollo(props.apolloState, {\n        getToken: function getToken() {\n          return cookie.get('token');\n        }\n      });\n      return _this;\n    }\n\n    _createClass(Apollo, [{\n      key: \"render\",\n      value: function render() {\n        return React.createElement(App, _extends({}, this.props, {\n          apolloClient: this.apolloClient,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }));\n      }\n    }]);\n\n    return Apollo;\n  }(Component), _defineProperty(_class, \"propTypes\", {\n    apolloState: PropTypes.object.isRequired\n  }), _temp;\n};\n\nexport default withApolloHoc;","map":{"version":3,"sources":["/Users/hannayang/hanna/hatchReact-reactAdmin/src/apollo/with-apollo-client.js"],"names":["Component","PropTypes","Head","getDataFromTree","nextCookies","cookie","initApollo","withApolloHoc","App","context","router","ctx","getToken","token","apolloClient","appProps","getInitialProps","res","finished","process","browser","console","error","rewind","apolloState","cache","extract","props","get","object","isRequired"],"mappings":";;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,eAAT,QAAgC,cAAhC;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,UAAP,MAAuB,oBAAvB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,GAAD,EAAS;AAAA;;AAC7B;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAK+BC,OAL/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAMYT,kBAAAA,SANZ,GAMuCS,OANvC,CAMYT,SANZ,EAMuBU,MANvB,GAMuCD,OANvC,CAMuBC,MANvB,EAM+BC,GAN/B,GAMuCF,OANvC,CAM+BE,GAN/B,EAQI;AACA;;AATJ;AAAA,yBAU+BL,UAAU,CACnC,EADmC,EAEnC;AACEM,oBAAAA,QAAQ,EAAE;AAAA,6BAAMR,WAAW,CAACO,GAAD,CAAX,CAAiBE,KAAvB;AAAA;AADZ,mBAFmC,CAVzC;;AAAA;AAUUC,kBAAAA,YAVV;AAiBIH,kBAAAA,GAAG,CAACG,YAAJ,GAAmBA,YAAnB;AAEIC,kBAAAA,QAnBR,GAmBmB,EAnBnB;;AAAA,uBAoBQP,GAAG,CAACQ,eApBZ;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAqBuBR,GAAG,CAACQ,eAAJ,CAAoBP,OAApB,CArBvB;;AAAA;AAqBMM,kBAAAA,QArBN;;AAAA;AAAA,wBAwBQJ,GAAG,CAACM,GAAJ,IAAWN,GAAG,CAACM,GAAJ,CAAQC,QAxB3B;AAAA;AAAA;AAAA;;AAAA,mDA2Ba,EA3Bb;;AAAA;AAAA,sBA8BSC,OAAO,CAACC,OA9BjB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,yBAiCcjB,eAAe,CACnB,oBAAC,GAAD,eACMY,QADN;AAEE,oBAAA,SAAS,EAAEf,SAFb;AAGE,oBAAA,MAAM,EAAEU,MAHV;AAIE,oBAAA,YAAY,EAAEI,YAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADmB,CAjC7B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA0CQ;AACA;AACA;AACAO,kBAAAA,OAAO,CAACC,KAAR,CAAc,uCAAd;;AA7CR;AAgDM;AACA;AACApB,kBAAAA,IAAI,CAACqB,MAAL;;AAlDN;AAqDI;AACMC,kBAAAA,WAtDV,GAsDwBV,YAAY,CAACW,KAAb,CAAmBC,OAAnB,EAtDxB;AAAA,qEAyDSX,QAzDT;AA0DMS,oBAAAA,WAAW,EAAXA;AA1DN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA8DE,oBAAYG,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,kFAAMA,KAAN;AACA,YAAKb,YAAL,GAAoBR,UAAU,CAACqB,KAAK,CAACH,WAAP,EAAoB;AAChDZ,QAAAA,QAAQ,EAAE;AAAA,iBAAMP,MAAM,CAACuB,GAAP,CAAW,OAAX,CAAN;AAAA;AADsC,OAApB,CAA9B;AAFiB;AAKlB;;AAnEH;AAAA;AAAA,+BAqEW;AACP,eAAO,oBAAC,GAAD,eAAS,KAAKD,KAAd;AAAqB,UAAA,YAAY,EAAE,KAAKb,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD;AAvEH;;AAAA;AAAA,IAA4Bd,SAA5B,wCACqB;AACjBwB,IAAAA,WAAW,EAAEvB,SAAS,CAAC4B,MAAV,CAAiBC;AADb,GADrB;AAyED,CA1ED;;AA4EA,eAAevB,aAAf","sourcesContent":["import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Head from 'next/head';\nimport { getDataFromTree } from 'react-apollo';\nimport nextCookies from 'next-cookies';\nimport cookie from 'js-cookie';\nimport initApollo from 'apollo/init-apollo';\n\nconst withApolloHoc = (App) => {\n  return class Apollo extends Component {\n    static propTypes = {\n      apolloState: PropTypes.object.isRequired,\n    };\n\n    static async getInitialProps(context) {\n      const { Component, router, ctx } = context;\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apolloClient = await initApollo(\n        {},\n        {\n          getToken: () => nextCookies(ctx).token,\n        },\n      );\n\n      ctx.apolloClient = apolloClient;\n\n      let appProps = {};\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(context);\n      }\n\n      if (ctx.res && ctx.res.finished) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        return {};\n      }\n\n      if (!process.browser) {\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(\n            <App\n              {...appProps}\n              Component={Component}\n              router={router}\n              apolloClient={apolloClient}\n            />,\n          );\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error('Error while running `getDataFromTree`', error);\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract();\n\n      return {\n        ...appProps,\n        apolloState,\n      };\n    }\n\n    constructor(props) {\n      super(props);\n      this.apolloClient = initApollo(props.apolloState, {\n        getToken: () => cookie.get('token'),\n      });\n    }\n\n    render() {\n      return <App {...this.props} apolloClient={this.apolloClient} />;\n    }\n  };\n};\n\nexport default withApolloHoc;\n"]},"metadata":{},"sourceType":"module"}