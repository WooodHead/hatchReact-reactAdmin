{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { split, from } from 'apollo-link';\nimport { getMainDefinition } from 'apollo-utilities';\nimport fetch from 'isomorphic-unfetch';\nimport resolvers from 'apollo/resolvers';\nimport initialData from 'apollo/initialData';\nvar apolloClient = null; // Polyfill fetch() on the server (used by apollo-client)\n\nif (!process.browser) {\n  global.fetch = fetch;\n}\n\nfunction create(initialState, _ref) {\n  var getToken = _ref.getToken;\n  var token = getToken();\n  var httpLink = createHttpLink({\n    credentials: 'same-origin',\n    // Additional fetch() options like `credentials` or `headers`\n    uri: process.env.API_URL\n  });\n  var authLink = setContext(function (_, _ref2) {\n    var headers = _ref2.headers;\n    // removing getToken() from here causes problems when clearing the store on login/log out\n    token = getToken();\n    return {\n      headers: _objectSpread({}, headers, token ? {\n        'x-authentication-token': token\n      } : {})\n    };\n  });\n  var link = from([authLink, httpLink]);\n\n  if (process.browser) {\n    var wsLink = new WebSocketLink({\n      uri: process.env.SUBSCRIPTION_URL,\n      options: {\n        reconnect: true,\n        connectionParams: {\n          'x-authentication-token': token\n        }\n      }\n    });\n    link = split( // split based on operation type (this is very important)\n    function (_ref3) {\n      var query = _ref3.query;\n      var definition = getMainDefinition(query);\n      return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n    }, wsLink, link);\n  }\n\n  var cache = new InMemoryCache().restore(initialState || {});\n  cache.writeData({\n    data: initialData\n  });\n  return new ApolloClient({\n    cache: cache,\n    connectToDevTools: process.browser,\n    link: link,\n    resolvers: resolvers,\n    ssrMode: !process.browser,\n    defaultOptions: {\n      watchQuery: {\n        errorPolicy: 'ignore'\n      },\n      query: {\n        errorPolicy: 'all'\n      },\n      mutate: {\n        errorPolicy: 'all'\n      }\n    }\n  });\n}\n\nexport default function initApollo(initialState, options) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!process.browser) {\n    return create(initialState, options);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState, options);\n  }\n\n  return apolloClient;\n}","map":{"version":3,"sources":["/Users/hannayang/hanna/hatchReact-reactAdmin/src/apollo/init-apollo.js"],"names":["ApolloClient","InMemoryCache","createHttpLink","setContext","WebSocketLink","split","from","getMainDefinition","fetch","resolvers","initialData","apolloClient","process","browser","global","create","initialState","getToken","token","httpLink","credentials","uri","env","API_URL","authLink","_","headers","link","wsLink","SUBSCRIPTION_URL","options","reconnect","connectionParams","query","definition","kind","operation","cache","restore","writeData","data","connectToDevTools","ssrMode","defaultOptions","watchQuery","errorPolicy","mutate","initApollo"],"mappings":"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","sourcesContent":["import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { split, from } from 'apollo-link';\nimport { getMainDefinition } from 'apollo-utilities';\nimport fetch from 'isomorphic-unfetch';\nimport resolvers from 'apollo/resolvers';\nimport initialData from 'apollo/initialData';\n\nlet apolloClient = null;\n\n// Polyfill fetch() on the server (used by apollo-client)\nif (!process.browser) {\n  global.fetch = fetch;\n}\n\nfunction create(initialState, { getToken }) {\n  let token = getToken();\n\n  const httpLink = createHttpLink({\n    credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\n    uri: process.env.API_URL,\n  });\n\n  const authLink = setContext((_, { headers }) => {\n    // removing getToken() from here causes problems when clearing the store on login/log out\n    token = getToken();\n    return {\n      headers: {\n        ...headers,\n        ...(token\n          ? {\n              'x-authentication-token': token,\n            }\n          : {}),\n      },\n    };\n  });\n\n  let link = from([authLink, httpLink]);\n\n  if (process.browser) {\n    const wsLink = new WebSocketLink({\n      uri: process.env.SUBSCRIPTION_URL,\n      options: {\n        reconnect: true,\n        connectionParams: {\n          'x-authentication-token': token,\n        },\n      },\n    });\n\n    link = split(\n      // split based on operation type (this is very important)\n      ({ query }) => {\n        const definition = getMainDefinition(query);\n        return (\n          definition.kind === 'OperationDefinition' &&\n          definition.operation === 'subscription'\n        );\n      },\n      wsLink,\n      link,\n    );\n  }\n\n  const cache = new InMemoryCache().restore(initialState || {});\n\n  cache.writeData({\n    data: initialData,\n  });\n\n  return new ApolloClient({\n    cache,\n    connectToDevTools: process.browser,\n    link,\n    resolvers,\n    ssrMode: !process.browser,\n    defaultOptions: {\n      watchQuery: {\n        errorPolicy: 'ignore',\n      },\n      query: {\n        errorPolicy: 'all',\n      },\n      mutate: {\n        errorPolicy: 'all',\n      },\n    },\n  });\n}\n\nexport default function initApollo(initialState, options) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n\n  if (!process.browser) {\n    return create(initialState, options);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = create(initialState, options);\n  }\n\n  return apolloClient;\n}\n"]},"metadata":{},"sourceType":"module"}